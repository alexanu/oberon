class RStore
!!!590598.cpp!!!	transmit(in event : Event [0..1]) : void
using namespace oberon::core;
using std::chrono::duration_cast;
using std::chrono::duration;
using boost::uuids::to_string;
if (event) {
  if (event->orderId() != Event::kNaOrderId)
    if (event->orderId() != boost::uuids::nil_uuid())
      order_id_.push_back(to_string(event->orderId()));
    else
      order_id_.push_back("");
  else
    order_id_.push_back("NA");
  timestamp_.push_back(duration_cast<duration<double>>(event->timestamp().time_since_epoch()).count());
  try {
    next_timestamp_[previous_.at(event->orderId())] = timestamp_.back();
  } catch (const std::out_of_range &) {
  }
  if (event->state() != OrderState::kFinished) {
    next_timestamp_.push_back(31556984400.0);
    previous_[event->orderId()] = timestamp_.size() - 1;
  }
  else {
    next_timestamp_.push_back(timestamp_.back());
    previous_.erase(event->orderId());
  }
  local_timestamp_.push_back(duration_cast<duration<double>>(event->localTimestamp().time_since_epoch()).count());
  if (event->eventNo() != Event::kNaEventNo)
    event_no_.push_back(event->eventNo());
  else
    event_no_.push_back(NA_INTEGER);
  price_.push_back(event->price());
  volume_.push_back(event->volume());
  delta_volume_.push_back(event->deltaVolume());
  is_deleted_.push_back(event->isDeleted());
  if (event->tradeId() != Event::kNaTradeId)
    trade_id_.push_back(event->tradeId());
  else
    trade_id_.push_back(NA_INTEGER);
  if (event->takerOrderId() != Event::kNaOrderId)
    if (event->takerOrderId() != boost::uuids::nil_uuid())
      taker_order_id_.push_back(to_string(event->takerOrderId()));
    else
      taker_order_id_.push_back("");
  else
    taker_order_id_.push_back("NA");
  state_.push_back(event->state());
}
!!!752390.cpp!!!	toDataframe() : List
Rcpp::List res = Rcpp::List::create(
    Rcpp::Named("maker_order_id") = order_id_,
    Rcpp::Named("event_no") = event_no_, Rcpp::Named("timestamp") = timestamp_,
    Rcpp::Named("state") = state_, Rcpp::Named("price") = price_,
    Rcpp::Named("volume") = volume_, Rcpp::Named("next_timestamp") = next_timestamp_, Rcpp::Named("trade_id") = trade_id_,
    Rcpp::Named("delta_volume") = delta_volume_,
    Rcpp::Named("taker_order_id") = taker_order_id_,
    Rcpp::Named("local_timestamp") = local_timestamp_,
    Rcpp::Named("is_deleted") = is_deleted_);
res.attr("class") = Rcpp::CharacterVector::create("data.table", "data.frame");
return res;
