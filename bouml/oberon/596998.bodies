class RBitstamp
!!!752518.cpp!!!	run(in quotes : DataFrame, in trades : DataFrame, in extract_only : bool = false) : List
using oberon::core::Duration;
using oberon::core::Reconstructor;
using std::chrono::duration;
using Timestamp=std::chrono::time_point<std::chrono::system_clock, duration<double>>;
using namespace date;
Rcpp::NumericVector order_id = quotes["order_id"];
Rcpp::NumericVector amount = quotes["amount"];
Rcpp::CharacterVector event = quotes["event"];
Rcpp::CharacterVector order_type = quotes["order_type"];
Rcpp::NumericVector quote_timestamp = quotes["microtimestamp"];
Rcpp::NumericVector quote_local = quotes["local_timestamp"];
Rcpp::NumericVector price = quotes["price"];

Rcpp::NumericVector trade_id = trades["bitstamp_trade_id"];
Rcpp::NumericVector trade_amount = trades["amount"];
Rcpp::NumericVector trade_price = trades["price"];
Rcpp::CharacterVector trade_type = trades["trade_type"];
Rcpp::NumericVector trade_timestamp = trades["trade_timestamp"];
Rcpp::NumericVector buy_order_id = trades["buy_order_id"];
Rcpp::NumericVector sell_order_id = trades["sell_order_id"];
Rcpp::NumericVector trade_local = trades["local_timestamp"];

auto bitstamp = Reconstructor::create(oberon::core::kBitstamp, "ETHUSD", this,
                                      2.0, extract_only);
Timestamp current_timestamp;
size_t q{0}, t{0};
try {
  while (q < quote_local.size() || t < trade_local.size()) {
#ifdef VERBOSE_RBITSTAMP
    std::cout << "q= " <<q << " t= " <<t << "\n";
#endif
    if (q < quote_timestamp.size() &&
        (t >= trade_local.size() || quote_timestamp[q] <= trade_timestamp[t])) {
      Timestamp next_timestamp =
          Timestamp(duration<double>(quote_timestamp[q]));
      if (current_timestamp != next_timestamp) {
        using boost::property_tree::ptree;
        ptree tree;
        current_timestamp = next_timestamp;
        tree.put("event", "elapsed");
        tree.put("timestamp", format("%FT%TZ", current_timestamp));
        bitstamp->process(tree);
      }
      using boost::property_tree::ptree;
      ptree tree;
      tree.put("microtimestamp", format("%FT%TZ", current_timestamp));
      tree.put("local_timestamp",
               format("%FT%TZ",
                      Timestamp(duration<double>(quote_local[q]))));
      tree.put("event", event[q]);
      tree.put("id", order_id[q]);
      tree.put("price", price[q]);
      tree.put("amount", amount[q]);
      tree.put("order_type", order_type[q]);
      bitstamp->process(tree);
      ++q;
    } else if (t < trade_timestamp.size() &&
               (q >= quote_timestamp.size() ||
                trade_timestamp[t] < quote_timestamp[q])) {
      Timestamp next_timestamp =
          Timestamp(duration<double>(trade_timestamp[t]));
      if (current_timestamp != next_timestamp) {
        using boost::property_tree::ptree;
        ptree tree;
        current_timestamp = next_timestamp;
        tree.put("event", "elapsed");
        tree.put("timestamp", format("%FT%TZ", current_timestamp));
        bitstamp->process(tree);
      }
      using boost::property_tree::ptree;
      ptree tree;
      tree.put("trade_timestamp", format("%FT%TZ", current_timestamp));
      tree.put("local_timestamp",
               format("%FT%TZ",
                      Timestamp(duration<double>(trade_local[t]))));
      tree.put("event", "match");
      tree.put("price", trade_price[t]);
      tree.put("amount", trade_amount[t]);
      tree.put("trade_id", trade_id[t]);
      if (trade_type[t] == "buy") {
        tree.put("maker_order_id", sell_order_id[t]);
        tree.put("taker_order_id", buy_order_id[t]);
        tree.put("order_type", "sell");
      } else {
        tree.put("maker_order_id", buy_order_id[t]);
        tree.put("taker_order_id", sell_order_id[t]);
        tree.put("order_type", "buy");
      }
      bitstamp->process(tree);
      ++t;
    }
  }
} catch (const std::logic_error &e) {
  std::cout << "Exception while processing " << e.what() << std::endl;
};

// Final elapsed for cleanup
using boost::property_tree::ptree;
ptree tree;
tree.put("event", "elapsed");
tree.put("timestamp",
         format("%FT%TZ", current_timestamp + std::chrono::seconds{2}));
bitstamp->process(tree);
return toDataframe();
